plugins {
    id 'java-library'
    id 'maven-publish'
    // can be run to check for new versions of dependencies
    id 'com.github.ben-manes.versions' version '0.36.0'
    // test coverage
    id 'jacoco'
    id 'eclipse'

    // publishing to Maven Central
    id "signing" // maven central requirement
    id "io.codearte.nexus-staging" version "0.22.0"
    id "de.marcphilipp.nexus-publish" version "0.4.0"
}

group 'ch.aaap'
version '1.1.5'

sourceCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

jacoco {
    toolVersion = "0.8.0"
}
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

test {
    useJUnitPlatform()
}
repositories {
    mavenCentral()
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "https://opensource.org/licenses/MIT"
        }
    }
    developers {
        developer {
            id "mnembrini"
            name "Marco Nembrini"
            email "marco.nembrini.co@gmail.com"
        }
    }

    scm {
        url "https://github.com/3AP-AG/harvest-client"
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    source = sourceSets.main.allJava
    // github is set to publish this folder
    options.encoding = 'UTF-8'
    destinationDir file("docs")
    options.optionFiles << file('gradle/javadoc.options')
}

// Create the publication with the pom configuration:

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            String owner = '3ap-ag'
            String repo = 'harvest-client'
            url = uri("https://maven.pkg.github.com/${owner}/${repo}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GH_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            // version, groupId and artifact Id taken from the project
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A Java client for the Harvest API')
                root.appendNode('name', 'harvest-client')
                root.appendNode('url', 'https://github.com/3AP-AG/harvest-client')
                root.children().last() + pomConfig
            }
        }
    }
}

def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingKey")
if (hasSigningKey) {
    sign(project)
}

void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("publish") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.gpr
    }
}

nexusStaging {
    if (project.hasProperty("sonatypeUsername")) {
        username = project.sonatypeUsername
    }
    if (project.hasProperty("sonatypePassword")) {
        password = project.sonatypePassword
    }
    repositoryDescription = "Release ${project.group} ${project.name} ${project.version}"
}

nexusPublishing {
    repositories {
        sonatype {
            if (project.hasProperty("sonatypeUsername")) {
                username = project.sonatypeUsername
            }
            if (project.hasProperty("sonatypePassword")) {
                password = project.sonatypePassword
            }
        }
    }
    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(5)
    clientTimeout = Duration.ofMinutes(5)
}

dependencies {

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.fatboyindustrial.gson-javatime-serialisers:gson-javatime-serialisers:1.1.1"
    // logging
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    // use log4j for unittests
    testImplementation group: "org.apache.logging.log4j", name: "log4j-core", version: "$log4jVersion"
    testImplementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "$log4jVersion"

    // immutable classes for domain objects
    // this will force gson 2.8 also for other dependencies
    implementation "org.immutables:gson:$immutablesVersion"
    compileOnly "org.immutables:value:$immutablesVersion"
    annotationProcessor "org.immutables:value:$immutablesVersion"

    implementation group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2"

    // configuration
    implementation "com.typesafe:config:1.3.3"

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

    testImplementation group: 'org.slf4j', name: 'jul-to-slf4j', version: "$slf4jVersion"
    testImplementation "org.mockito:mockito-core:2.15.0"
    testImplementation "org.assertj:assertj-core:3.9.1"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "org.assertj:assertj-joda-time:2.0.0"


}
